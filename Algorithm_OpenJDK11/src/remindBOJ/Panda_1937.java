package remindBOJ;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Panda_1937 {   // dp
    static int size;
    static int[][] map, dp;

    final static int[] dx= {1,-1,0,0}, dy= {0,0,1,-1};

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        size = Integer.parseInt(br.readLine());
        map = new int[size][size];
        dp = new int[size][size];

        for(int i=0; i<size; i++) {
            StringTokenizer st = new StringTokenizer(br.readLine());
            for(int j=0; j<size; j++)   map[i][j] = Integer.parseInt(st.nextToken());
        }
        br.close();
        solution();
    }

    private static void solution() {
        int answer =0;
        for(int y=0; y<size; y++) {
            for(int x=0; x<size; x++) {
                answer = Math.max(answer,findBamboo(x,y));
            }
        }
        System.out.println(answer);
    }

    private static int findBamboo(int x, int y) {
        if(dp[y][x] !=0)    return dp[y][x];
        dp[y][x] =1;

        for(int i=0; i<4; i++) {
            int nx = x+dx[i];
            int ny = y+dy[i];
            if(isInArea(nx,ny) && canMove(x,y,nx,ny)) {
                dp[y][x] = Math.max(dp[y][x], findBamboo(nx,ny)+1);
            }
        }

        return dp[y][x];
    }

    private static boolean isInArea(int x, int y) { // out of idx 방지
        return x>=0 && x<size && y>=0 && y<size;
    }

    private static boolean canMove(int x, int y, int nx, int ny) {
//      이동 위치의 대나무가 더 많은 조건
        return map[y][x] < map[ny][nx];
    }
}


/*
40
14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10
1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4
7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13
6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8
14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10
1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4
7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13
6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8
14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10
1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4
7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13
6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8
14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10
1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4
7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13
6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8
14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10
1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4
7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13
6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8
14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10
1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4
7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13
6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8
14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10
1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4
7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13
6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8
14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10
1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4
7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13
6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8
14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10
1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4
7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13
6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8
14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10 14 9 12 10
1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4 1 11 5 4
7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13 7 15 2 13
6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8 6 3 16 8*/
